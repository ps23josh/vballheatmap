import React, { useState } from 'react';
import { 
  Download, 
  Share2, 
  Copy, 
  Trash2, 
  Calendar, 
  FileText, 
  Tag,
  Star,
  ExternalLink
} from 'lucide-react';
import { AnalysisResult as AnalysisResultType } from '../types';

interface AnalysisResultProps {
  result: AnalysisResultType;
  onRemove: (id: string) => void;
}

export const AnalysisResult: React.FC<AnalysisResultProps> = ({ result, onRemove }) => {
  const [copied, setCopied] = useState(false);
  const [imageError, setImageError] = useState(false);

  const handleCopyAnalysis = async () => {
    try {
      await navigator.clipboard.writeText(result.analysis);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (err) {
      console.error('Failed to copy text:', err);
    }
  };

  const handleDownloadAnalysis = () => {
    const blob = new Blob([
      `Image Analysis Report\n\n`,
      `File: ${result.fileName}\n`,
      `Date: ${result.timestamp.toLocaleString()}\n`,
      `Confidence: ${result.confidence ? (result.confidence * 100).toFixed(1) : 'N/A'}%\n\n`,
      `Analysis:\n${result.analysis}\n\n`,
      result.tags?.length ? `Tags: ${result.tags.join(', ')}\n` : '',
      `\nGenerated by Gemini Image Analyzer`
    ], { type: 'text/plain' });
    
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `analysis-${result.fileName.replace(/\.[^/.]+$/, '')}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const handleShare = async () => {
    if (navigator.share) {
      try {
        await navigator.share({
          title: 'Image Analysis Result',
          text: result.analysis,
        });
      } catch (err) {
        console.error('Error sharing:', err);
      }
    } else {
      // Fallback to copying to clipboard
      handleCopyAnalysis();
    }
  };

  return (
    <div className="bg-white rounded-xl shadow-lg overflow-hidden border border-gray-200">
      {/* Header */}
      <div className="p-6 border-b border-gray-200">
        <div className="flex items-start justify-between">
          <div className="flex-1">
            <h3 className="text-lg font-semibold text-gray-900 mb-2">
              Analysis Result
            </h3>
            <div className="flex items-center space-x-4 text-sm text-gray-600">
              <div className="flex items-center space-x-1">
                <Calendar className="w-4 h-4" />
                <span>{result.timestamp.toLocaleString()}</span>
              </div>
              <div className="flex items-center space-x-1">
                <FileText className="w-4 h-4" />
                <span>{result.fileName}</span>
              </div>
              {result.confidence && (
                <div className="flex items-center space-x-1">
                  <Star className="w-4 h-4" />
                  <span>{(result.confidence * 100).toFixed(1)}% confidence</span>
                </div>
              )}
            </div>
          </div>
          
          <div className="flex items-center space-x-2">
            <button
              onClick={handleCopyAnalysis}
              className="p-2 text-gray-600 hover:text-indigo-600 hover:bg-indigo-50 rounded-lg transition-colors"
              title="Copy analysis"
            >
              <Copy className="w-4 h-4" />
            </button>
            <button
              onClick={handleDownloadAnalysis}
              className="p-2 text-gray-600 hover:text-green-600 hover:bg-green-50 rounded-lg transition-colors"
              title="Download analysis"
            >
              <Download className="w-4 h-4" />
            </button>
            <button
              onClick={handleShare}
              className="p-2 text-gray-600 hover:text-blue-600 hover:bg-blue-50 rounded-lg transition-colors"
              title="Share analysis"
            >
              <Share2 className="w-4 h-4" />
            </button>
            <button
              onClick={() => onRemove(result.id)}
              className="p-2 text-gray-600 hover:text-red-600 hover:bg-red-50 rounded-lg transition-colors"
              title="Remove result"
            >
              <Trash2 className="w-4 h-4" />
            </button>
          </div>
        </div>
      </div>

      {/* Content */}
      <div className="p-6">
        <div className="grid md:grid-cols-2 gap-6">
          {/* Image Preview */}
          <div className="space-y-4">
            <h4 className="font-medium text-gray-900">Original Image</h4>
            {!imageError ? (
              <div className="relative group">
                <img
                  src={result.imageUrl}
                  alt={result.fileName}
                  className="w-full h-64 object-cover rounded-lg border border-gray-200"
                  onError={() => setImageError(true)}
                />
                <div className="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-10 transition-all duration-200 rounded-lg flex items-center justify-center">
                  <button
                    onClick={() => window.open(result.imageUrl, '_blank')}
                    className="opacity-0 group-hover:opacity-100 bg-white bg-opacity-90 p-2 rounded-full transition-all duration-200"
                  >
                    <ExternalLink className="w-4 h-4 text-gray-700" />
                  </button>
                </div>
              </div>
            ) : (
              <div className="w-full h-64 bg-gray-100 rounded-lg border border-gray-200 flex items-center justify-center">
                <div className="text-center text-gray-500">
                  <FileText className="w-8 h-8 mx-auto mb-2" />
                  <p className="text-sm">Image preview unavailable</p>
                </div>
              </div>
            )}

            {/* Tags */}
            {result.tags && result.tags.length > 0 && (
              <div>
                <h5 className="text-sm font-medium text-gray-700 mb-2 flex items-center">
                  <Tag className="w-4 h-4 mr-1" />
                  Tags
                </h5>
                <div className="flex flex-wrap gap-2">
                  {result.tags.map((tag, index) => (
                    <span
                      key={index}
                      className="px-2 py-1 bg-indigo-100 text-indigo-700 text-xs rounded-full"
                    >
                      {tag}
                    </span>
                  ))}
                </div>
              </div>
            )}
          </div>

          {/* Analysis Text */}
          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <h4 className="font-medium text-gray-900">AI Analysis</h4>
              {copied && (
                <span className="text-sm text-green-600 font-medium">Copied!</span>
              )}
            </div>
            <div className="bg-gray-50 rounded-lg p-4 max-h-80 overflow-y-auto">
              <p className="text-gray-700 leading-relaxed whitespace-pre-wrap">
                {result.analysis}
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};
