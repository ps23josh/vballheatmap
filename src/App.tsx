import React, { useState } from 'react';
import { Header } from './components/Header';
import { ImageUpload } from './components/ImageUpload';
import { AnnotationCanvas } from './components/AnnotationCanvas';
import { AnalysisResult } from './components/AnalysisResult';
import { EmptyState } from './components/EmptyState';
import { SettingsModal } from './components/SettingsModal';
import { useImageAnalysis } from './hooks/useImageAnalysis';
import { generateVolleyballCourt } from './utils/courtGenerator';
import { Trash2, Download } from 'lucide-react';

function App() {
  const { results, progress, error, analyzeImage, clearResults, removeResult } = useImageAnalysis();
  const [showSettings, setShowSettings] = useState(false);
  const [annotationMode, setAnnotationMode] = useState(false);
  const [currentImageFile, setCurrentImageFile] = useState<File | null>(null);

  const handleImageSelect = async (file: File, customPrompt?: string) => {
    try {
      await analyzeImage(file, customPrompt);
    } catch (err) {
      console.error('Analysis failed:', err);
    }
  };

  const handleImageAnnotate = (file: File) => {
    setCurrentImageFile(file);
    setAnnotationMode(true);
  };

  const handleDefaultImageSelect = async () => {
    try {
      const courtFile = await generateVolleyballCourt();
      setCurrentImageFile(courtFile);
      setAnnotationMode(true);
    } catch (err) {
      console.error('Failed to generate volleyball court:', err);
      alert('Failed to generate volleyball court. Please try uploading your own image.');
    }
  };

  const handleAnnotationSubmit = async (annotatedImageBlob: Blob) => {
    // Convert blob to file
    const annotatedFile = new File([annotatedImageBlob], `annotated-${currentImageFile?.name || 'court.png'}`, {
      type: 'image/png'
    });

    setAnnotationMode(false);
    setCurrentImageFile(null);

    try {
      await analyzeImage(annotatedFile);
    } catch (err) {
      console.error('Analysis failed:', err);
    }
  };

  const handleAnnotationCancel = () => {
    setAnnotationMode(false);
    setCurrentImageFile(null);
  };

  const handleDownloadAll = () => {
    if (results.length === 0) return;

    const allAnalyses = results.map((result, index) => 
      `Analysis ${index + 1}\n` +
      `File: ${result.fileName}\n` +
      `Date: ${result.timestamp.toLocaleString()}\n` +
      `Confidence: ${result.confidence ? (result.confidence * 100).toFixed(1) : 'N/A'}%\n\n` +
      `${result.analysis}\n\n` +
      `${'-'.repeat(50)}\n\n`
    ).join('');

    const blob = new Blob([
      `Volleyball Heatmap Analysis Report\n`,
      `Generated: ${new Date().toLocaleString()}\n`,
      `Total Analyses: ${results.length}\n\n`,
      `${'='.repeat(50)}\n\n`,
      allAnalyses,
      `Generated by Volleyball Heatmap Analysis Tool`
    ], { type: 'text/plain' });
    
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `volleyball-analysis-report-${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  if (annotationMode && currentImageFile) {
    return (
      <div className="min-h-screen bg-gray-50">
        <Header onSettingsClick={() => setShowSettings(true)} />
        <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          <AnnotationCanvas
            imageFile={currentImageFile}
            onSubmitAnnotation={handleAnnotationSubmit}
            onCancel={handleAnnotationCancel}
          />
        </main>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <Header onSettingsClick={() => setShowSettings(true)} />
      
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Hero Section */}
        <div className="text-center mb-12">
          <h2 className="text-3xl font-bold text-gray-900 mb-4">
            AI-Powered Volleyball Court Analysis
          </h2>
          <p className="text-lg text-gray-600 max-w-2xl mx-auto">
            Upload volleyball court images, annotate successful and unsuccessful points, 
            and get detailed coaching insights powered by AI.
          </p>
        </div>

        {/* Upload Section */}
        <div className="mb-12">
          <ImageUpload
            onImageSelect={handleImageSelect}
            onImageAnnotate={handleImageAnnotate}
            onDefaultImageSelect={handleDefaultImageSelect}
            progress={progress}
            disabled={progress.status === 'uploading' || progress.status === 'analyzing'}
          />
        </div>

        {/* Error Display */}
        {error && (
          <div className="mb-8 max-w-2xl mx-auto">
            <div className="bg-red-50 border border-red-200 rounded-lg p-4">
              <div className="flex items-start space-x-2">
                <div className="w-5 h-5 text-red-600 mt-0.5">⚠️</div>
                <div>
                  <h3 className="font-medium text-red-900">Analysis Failed</h3>
                  <p className="text-red-700 mt-1">{error}</p>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Results Section */}
        <div className="space-y-8">
          {results.length > 0 && (
            <div className="flex items-center justify-between">
              <h3 className="text-xl font-semibold text-gray-900">
                Analysis Results ({results.length})
              </h3>
              <div className="flex items-center space-x-3">
                <button
                  onClick={handleDownloadAll}
                  className="flex items-center space-x-2 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
                >
                  <Download className="w-4 h-4" />
                  <span>Download All</span>
                </button>
                <button
                  onClick={clearResults}
                  className="flex items-center space-x-2 px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors"
                >
                  <Trash2 className="w-4 h-4" />
                  <span>Clear All</span>
                </button>
              </div>
            </div>
          )}

          {results.length === 0 ? (
            <EmptyState />
          ) : (
            <div className="space-y-6">
              {results.map((result) => (
                <AnalysisResult
                  key={result.id}
                  result={result}
                  onRemove={removeResult}
                />
              ))}
            </div>
          )}
        </div>
      </main>

      {/* Footer */}
      <footer className="bg-white border-t border-gray-200 mt-16">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          <div className="text-center text-gray-600">
            <p className="mb-2">
              Built with ❤️ using React, TypeScript, and Google's Gemini AI
            </p>
            <p className="text-sm">
              Your images are processed securely and never stored on our servers.
            </p>
          </div>
        </div>
      </footer>

      {/* Settings Modal */}
      <SettingsModal
        isOpen={showSettings}
        onClose={() => setShowSettings(false)}
      />
    </div>
  );
}

export default App;
